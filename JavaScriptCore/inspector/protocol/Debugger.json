{
    "domain": "Debugger",
    "description": "Debugger domain exposes JavaScript debugging capabilities. It allows setting and removing breakpoints, stepping through execution, exploring stack traces, etc.",
    "types": [
        {
            "id": "BreakpointId",
            "type": "string",
            "description": "Breakpoint identifier."
        },
        {
            "id": "ScriptId",
            "type": "string",
            "description": "Unique script identifier."
        },
        {
            "id": "CallFrameId",
            "type": "string",
            "description": "Call frame identifier."
        },
        {
            "id": "Location",
            "type": "object",
            "properties": [
                { "name": "scriptId", "$ref": "ScriptId", "description": "Script identifier as reported in the <code>Debugger.scriptParsed</code>." },
                { "name": "lineNumber", "type": "integer", "description": "Line number in the script." },
                { "name": "columnNumber", "type": "integer", "optional": true, "description": "Column number in the script." }
            ],
            "description": "Location in the source code."
        },
        {
            "id": "BreakpointAction",
            "type": "object",
            "properties": [
                { "name": "type", "type": "string", "enum": ["log", "evaluate", "sound"], "description": "Different kinds of breakpoint actions." },
                { "name": "data", "type": "string", "optional": true, "description": "Data associated with this breakpoint type (e.g. for type \"eval\" this is the JavaScript string to evalulate)." }
            ],
            "description": "Action to perform when a breakpoint is triggered."
        },
        {
            "id": "BreakpointOptions",
            "type": "object",
            "properties": [
                { "name": "condition", "type": "string", "optional": true, "description": "Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true." },
                { "name": "actions", "type": "array", "optional": true, "items": { "$ref": "BreakpointAction" }, "description": "Actions to perform automatically when the breakpoint is triggered." },
                { "name": "autoContinue", "type": "boolean", "optional": true, "description": "Automatically continue after hitting this breakpoint and running actions." }
            ],
            "description": "Extra options that modify breakpoint behavior."
        },
        {
            "id": "FunctionDetails",
            "type": "object",
            "properties": [
                { "name": "location", "$ref": "Location", "description": "Location of the function." },
                { "name": "name", "type": "string", "optional": true, "description": "Name of the function. Not present for anonymous functions." },
                { "name": "displayName", "type": "string", "optional": true, "description": "Display name of the function(specified in 'displayName' property on the function object)." },
                { "name": "inferredName", "type": "string", "optional": true, "description": "Name of the function inferred from its initial assignment." },
                { "name": "scopeChain", "type": "array", "optional": true, "items": { "$ref": "Scope" }, "description": "Scope chain for this closure." }
            ],
            "description": "Information about the function."
        },
        {
            "id": "CallFrame",
            "type": "object",
            "properties": [
                { "name": "callFrameId", "$ref": "CallFrameId", "description": "Call frame identifier. This identifier is only valid while the virtual machine is paused." },
                { "name": "functionName", "type": "string", "description": "Name of the JavaScript function called on this call frame." },
                { "name": "location", "$ref": "Location", "description": "Location in the source code." },
                { "name": "scopeChain", "type": "array", "items": { "$ref": "Scope" }, "description": "Scope chain for this call frame." },
                { "name": "this", "$ref": "Runtime.RemoteObject", "description": "<code>this</code> object for this call frame." }
            ],
            "description": "JavaScript call frame. Array of call frames form the call stack."
        },
        {
            "id": "Scope",
            "type": "object",
            "properties": [
                { "name": "type", "type": "string", "enum": ["global", "local", "with", "closure", "catch"], "description": "Scope type." },
                { "name": "object", "$ref": "Runtime.RemoteObject", "description": "Object representing the scope. For <code>global</code> and <code>with</code> scopes it represents the actual object; for the rest of the scopes, it is artificial transient object enumerating scope variables as its properties." }
            ],
            "description": "Scope description."
        }
    ],
    "commands": [
        {
            "name": "causesRecompilation",
            "returns": [
                { "name": "result", "type": "boolean", "description": "True if enabling debugger causes scripts recompilation." }
            ],
            "description": "Tells whether enabling debugger causes scripts recompilation."
        },
        {
            "name": "supportsSeparateScriptCompilationAndExecution",
            "returns": [
                { "name": "result", "type": "boolean", "description": "True if debugger supports separate script compilation and execution." }
            ],
            "description": "Tells whether debugger supports separate script compilation and execution."
        },
        {
            "name": "enable",
            "description": "Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received."
        },
        {
            "name": "disable",
            "description": "Disables debugger for given page."
        },
        {
            "name": "setBreakpointsActive",
            "parameters": [
                { "name": "active", "type": "boolean", "description": "New value for breakpoints active state." }
            ],
            "description": "Activates / deactivates all breakpoints on the page."
        },
        {
            "name": "setBreakpointByUrl",
            "parameters": [
                { "name": "lineNumber", "type": "integer", "description": "Line number to set breakpoint at." },
                { "name": "url", "type": "string", "optional": true, "description": "URL of the resources to set breakpoint on." },
                { "name": "urlRegex", "type": "string", "optional": true, "description": "Regex pattern for the URLs of the resources to set breakpoints on. Either <code>url</code> or <code>urlRegex</code> must be specified." },
                { "name": "columnNumber", "type": "integer", "optional": true, "description": "Offset in the line to set breakpoint at." },
                { "name": "options", "$ref": "BreakpointOptions", "optional": true, "description": "Options to apply to this breakpoint to modify its behavior." }
            ],
            "returns": [
                { "name": "breakpointId", "$ref": "BreakpointId", "description": "Id of the created breakpoint for further reference." },
                { "name": "locations", "type": "array", "items": { "$ref": "Location"}, "description": "List of the locations this breakpoint resolved into upon addition." }
            ],
            "description": "Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads."
        },
        {
            "name": "setBreakpoint",
            "parameters": [
                { "name": "location", "$ref": "Location", "description": "Location to set breakpoint in." },
                { "name": "options", "$ref": "BreakpointOptions", "optional": true, "description": "Options to apply to this breakpoint to modify its behavior." }
            ],
            "returns": [
                { "name": "breakpointId", "$ref": "BreakpointId", "description": "Id of the created breakpoint for further reference." },
                { "name": "actualLocation", "$ref": "Location", "description": "Location this breakpoint resolved into." }
            ],
            "description": "Sets JavaScript breakpoint at a given location."
        },
        {
            "name": "removeBreakpoint",
            "parameters": [
                { "name": "breakpointId", "$ref": "BreakpointId" }
            ],
            "description": "Removes JavaScript breakpoint."
        },
        {
            "name": "continueToLocation",
            "parameters": [
                { "name": "location", "$ref": "Location", "description": "Location to continue to." }
            ],
            "description": "Continues execution until specific location is reached."
        },
        {
            "name": "stepOver",
            "description": "Steps over the statement."
        },
        {
            "name": "stepInto",
            "description": "Steps into the function call."
        },
        {
            "name": "stepOut",
            "description": "Steps out of the function call."
        },
        {
            "name": "pause",
            "description": "Stops on the next JavaScript statement."
        },
        {
            "name": "resume",
            "description": "Resumes JavaScript execution."
        },
        {
            "name": "searchInContent",
            "parameters": [
                { "name": "scriptId", "$ref": "ScriptId", "description": "Id of the script to search in." },
                { "name": "query", "type": "string", "description": "String to search for."  },
                { "name": "caseSensitive", "type": "boolean", "optional": true, "description": "If true, search is case sensitive." },
                { "name": "isRegex", "type": "boolean", "optional": true, "description": "If true, treats string parameter as regex." }
            ],
            "returns": [
                { "name": "result", "type": "array", "items": { "$ref": "GenericTypes.SearchMatch" }, "description": "List of search matches." }
            ],
            "description": "Searches for given string in script content."
        },
        {
            "name": "canSetScriptSource",
            "returns": [
                { "name": "result", "type": "boolean", "description": "True if <code>setScriptSource</code> is supported." }
            ],
            "description": "Tells whether <code>setScriptSource</code> is supported."
        },
        {
            "name": "setScriptSource",
            "parameters": [
                { "name": "scriptId", "$ref": "ScriptId", "description": "Id of the script to edit." },
                { "name": "scriptSource", "type": "string", "description": "New content of the script." },
                { "name": "preview", "type": "boolean", "optional": true, "description": " If true the change will not actually be applied. Preview mode may be used to get result description without actually modifying the code." }
            ],
            "returns": [
                { "name": "callFrames", "type": "array", "optional": true, "items": { "$ref": "CallFrame"}, "description": "New stack trace in case editing has happened while VM was stopped." },
                { "name": "result", "type": "object", "optional": true, "description": "VM-specific description of the changes applied." }
            ],
            "description": "Edits JavaScript source live."
        },
        {
            "name": "getScriptSource",
            "parameters": [
                { "name": "scriptId", "$ref": "ScriptId", "description": "Id of the script to get source for." }
            ],
            "returns": [
                { "name": "scriptSource", "type": "string", "description": "Script source." }
            ],
            "description": "Returns source for the script with given id."
        },
        {
            "name": "getFunctionDetails",
            "parameters": [
                { "name": "functionId", "$ref": "Runtime.RemoteObjectId", "description": "Id of the function to get location for." }
            ],
            "returns": [
                { "name": "details", "$ref": "FunctionDetails", "description": "Information about the function." }
            ],
            "description": "Returns detailed informtation on given function."
        },
        {
            "name": "setPauseOnExceptions",
            "parameters": [
                { "name": "state", "type": "string", "enum": ["none", "uncaught", "all"], "description": "Pause on exceptions mode." }
            ],
            "description": "Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>."
        },
        {
            "name": "evaluateOnCallFrame",
            "parameters": [
                { "name": "callFrameId", "$ref": "CallFrameId", "description": "Call frame identifier to evaluate on." },
                { "name": "expression", "type": "string", "description": "Expression to evaluate." },
                { "name": "objectGroup", "type": "string", "optional": true, "description": "String object group name to put result into (allows rapid releasing resulting object handles using <code>releaseObjectGroup</code>)." },
                { "name": "includeCommandLineAPI", "type": "boolean", "optional": true, "description": "Specifies whether command line API should be available to the evaluated expression, defaults to false." },
                { "name": "doNotPauseOnExceptionsAndMuteConsole", "type": "boolean", "optional": true, "description": "Specifies whether evaluation should stop on exceptions and mute console. Overrides setPauseOnException state." },
                { "name": "returnByValue", "type": "boolean", "optional": true, "description": "Whether the result is expected to be a JSON object that should be sent by value." },
                { "name": "generatePreview", "type": "boolean", "optional": true, "description": "Whether preview should be generated for the result." }
            ],
            "returns": [
                { "name": "result", "$ref": "Runtime.RemoteObject", "description": "Object wrapper for the evaluation result." },
                { "name": "wasThrown", "type": "boolean", "optional": true, "description": "True if the result was thrown during the evaluation." }
            ],
            "description": "Evaluates expression on a given call frame."
        },
        {
            "name": "compileScript",
            "parameters": [
                { "name": "expression", "type": "string", "description": "Expression to compile." },
                { "name": "sourceURL", "type": "string", "description": "Source url to be set for the script." }
            ],
            "returns": [
                { "name": "scriptId", "$ref": "ScriptId", "optional": true, "description": "Id of the script." },
                { "name": "syntaxErrorMessage", "type": "string", "optional": true, "description": "Syntax error message if compilation failed." }
            ],
            "description": "Compiles expression."
        },
        {
            "name": "runScript",
            "parameters": [
                { "name": "scriptId", "$ref": "ScriptId", "description": "Id of the script to run." },
                { "name": "contextId", "$ref": "Runtime.ExecutionContextId", "optional": true, "description": "Specifies in which isolated context to perform script run. Each content script lives in an isolated context and this parameter may be used to specify one of those contexts. If the parameter is omitted or 0 the evaluation will be performed in the context of the inspected page." },
                { "name": "objectGroup", "type": "string", "optional": true, "description": "Symbolic group name that can be used to release multiple objects." },
                { "name": "doNotPauseOnExceptionsAndMuteConsole", "type": "boolean", "optional": true, "description": "Specifies whether script run should stop on exceptions and mute console. Overrides setPauseOnException state." }
            ],
            "returns": [
                { "name": "result", "$ref": "Runtime.RemoteObject", "description": "Run result." },
                { "name": "wasThrown", "type": "boolean", "optional": true, "description": "True if the result was thrown during the script run." }
            ],
            "description": "Runs script with given id in a given context."
        },
        {
            "name": "setOverlayMessage",
            "parameters": [
                { "name": "message", "type": "string", "optional": true, "description": "Overlay message to display when paused in debugger." }
            ],
            "description": "Sets overlay message."
        }
    ],
    "events": [
        {
            "name": "globalObjectCleared",
            "description": "Called when global has been cleared and debugger client should reset its state. Happens upon navigation or reload."
        },
        {
            "name": "scriptParsed",
            "parameters": [
                { "name": "scriptId", "$ref": "ScriptId", "description": "Identifier of the script parsed." },
                { "name": "url", "type": "string", "description": "URL or name of the script parsed (if any)." },
                { "name": "startLine", "type": "integer", "description": "Line offset of the script within the resource with given URL (for script tags)." },
                { "name": "startColumn", "type": "integer", "description": "Column offset of the script within the resource with given URL." },
                { "name": "endLine", "type": "integer", "description": "Last line of the script." },
                { "name": "endColumn", "type": "integer", "description": "Length of the last line of the script." },
                { "name": "isContentScript", "type": "boolean", "optional": true, "description": "Determines whether this script is a user extension script." },
                { "name": "sourceMapURL", "type": "string", "optional": true, "description": "URL of source map associated with script (if any)." },
                { "name": "hasSourceURL", "type": "boolean", "optional": true, "description": "True, if this script has sourceURL." }
            ],
            "description": "Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger."
        },
        {
            "name": "scriptFailedToParse",
            "parameters": [
                { "name": "url", "type": "string", "description": "URL of the script that failed to parse." },
                { "name": "scriptSource", "type": "string", "description": "Source text of the script that failed to parse." },
                { "name": "startLine", "type": "integer", "description": "Line offset of the script within the resource." },
                { "name": "errorLine", "type": "integer", "description": "Line with error." },
                { "name": "errorMessage", "type": "string", "description": "Parse error message." }
            ],
            "description": "Fired when virtual machine fails to parse the script."
        },
        {
            "name": "breakpointResolved",
            "parameters": [
                { "name": "breakpointId", "$ref": "BreakpointId", "description": "Breakpoint unique identifier." },
                { "name": "location", "$ref": "Location", "description": "Actual breakpoint location." }
            ],
            "description": "Fired when breakpoint is resolved to an actual script and location."
        },
        {
            "name": "paused",
            "parameters": [
                { "name": "callFrames", "type": "array", "items": { "$ref": "CallFrame" }, "description": "Call stack the virtual machine stopped on." },
                { "name": "reason", "type": "string", "enum": [ "XHR", "DOM", "EventListener", "exception", "assert", "CSPViolation", "other" ], "description": "Pause reason." },
                { "name": "data", "type": "object", "optional": true, "description": "Object containing break-specific auxiliary properties." }
            ],
            "description": "Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria."
        },
        {
            "name": "resumed",
            "description": "Fired when the virtual machine resumed execution."
        }
    ]
}
